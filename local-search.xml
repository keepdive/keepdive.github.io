<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>个人建站博客框架Hexo设置优化胎教级教程</title>
    <link href="/2021/11/11/%E4%B8%AA%E4%BA%BA%E5%BB%BA%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6Hexo%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%8C%96%E8%83%8E%E6%95%99%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <url>/2021/11/11/%E4%B8%AA%E4%BA%BA%E5%BB%BA%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6Hexo%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%8C%96%E8%83%8E%E6%95%99%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><ul><li>系统：win10</li><li>需要的软件：node.js 、 git、gitbook、PicGo、Typora、Snipaste</li><li>网站： github、gitee</li></ul><h4 id="二、安装Hexo博客框架建站（本地）"><a href="#二、安装Hexo博客框架建站（本地）" class="headerlink" title="二、安装Hexo博客框架建站（本地）"></a>二、安装Hexo博客框架建站（本地）</h4><h5 id="2-1、安装前提"><a href="#2-1、安装前提" class="headerlink" title="2.1、安装前提"></a>2.1、安装前提</h5><h6 id="2-1-1、安装node-js"><a href="#2-1-1、安装node-js" class="headerlink" title="2.1.1、安装node.js"></a>2.1.1、安装node.js</h6><p>菜鸟教程详细安装步骤：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h6 id="2-1-2、安装git"><a href="#2-1-2、安装git" class="headerlink" title="2.1.2、安装git"></a>2.1.2、安装git</h6><p>菜鸟教程详细安装步骤：<a href="https://www.runoob.com/git/git-install-setup.html">https://www.runoob.com/git/git-install-setup.html</a></p><h5 id="2-2、安装Hexo"><a href="#2-2、安装Hexo" class="headerlink" title="2.2、安装Hexo"></a>2.2、安装Hexo</h5><p>在本地磁盘创建一个文件夹用来存储博客，我这边是在D盘创建了MyBlog的文件夹。</p><p>进入MyBlog文件夹，右键选择Git Bash Here。在命令行工具输入以下命令安装hexo。<img src="https://gitee.com/divemaven/git-project/raw/master/202109261634217.png" alt="image-20210926163420085"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-cli -g//全局安装命令<br></code></pre></td></tr></table></figure><h5 id="2-3、建站"><a href="#2-3、建站" class="headerlink" title="2.3、建站"></a>2.3、建站</h5><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo init//对MyBlog文件夹进行初始化<br>npm install//安装项目依赖<br>hexo server     //本地服务器打开项目，查看博客<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261655658.png" alt="image-20210926165558592"></p><p><strong>登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果，如果打开网站之后可以看到以下页面说明你已经完成了建站的基本操作。</strong></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261657458.png" alt="image-20210926165719163"></p><p><strong>新建完成后，指定文件夹的目录如下：</strong></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;hexo-site&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;hexo generate&quot;</span>,<br>    <span class="hljs-attr">&quot;clean&quot;</span>: <span class="hljs-string">&quot;hexo clean&quot;</span>,<br>    <span class="hljs-attr">&quot;deploy&quot;</span>: <span class="hljs-string">&quot;hexo deploy&quot;</span>,<br>    <span class="hljs-attr">&quot;server&quot;</span>: <span class="hljs-string">&quot;hexo server&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hexo&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;5.4.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;hexo&quot;</span>: <span class="hljs-string">&quot;^5.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-generator-archive&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-generator-category&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-generator-index&quot;</span>: <span class="hljs-string">&quot;^2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-generator-tag&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-renderer-marked&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="hljs-string">&quot;^2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-server&quot;</span>: <span class="hljs-string">&quot;^2.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;hexo-theme-landscape&quot;</span>: <span class="hljs-string">&quot;^0.0.3&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>scaffolds</strong></p><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong></p><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h4 id="三、将博客部署到-Github-Pages-上（线上）"><a href="#三、将博客部署到-Github-Pages-上（线上）" class="headerlink" title="三、将博客部署到 Github Pages 上（线上）"></a>三、将博客部署到 Github Pages 上（线上）</h4><h5 id="3-1、注册github"><a href="#3-1、注册github" class="headerlink" title="3.1、注册github"></a>3.1、注册github</h5><p>github官网：<a href="https://github.com/">https://github.com/</a></p><h5 id="3-2、创建项目代码库"><a href="#3-2、创建项目代码库" class="headerlink" title="3.2、创建项目代码库"></a>3.2、创建项目代码库</h5><p><strong>注意名称一定是<code>your_username.github.io</code>这样的格式。</strong></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261729392.png" alt="image-20210926172949213"></p><h5 id="3-3、-配置-SSH-密钥"><a href="#3-3、-配置-SSH-密钥" class="headerlink" title="3.3、 配置 SSH 密钥"></a>3.3、 配置 SSH 密钥</h5><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，</p><h6 id="3-3-1、-使用Git生成-SSH-密钥"><a href="#3-3-1、-使用Git生成-SSH-密钥" class="headerlink" title="3.3.1、 使用Git生成 SSH 密钥"></a>3.3.1、 使用Git生成 SSH 密钥</h6><p>在存放博客资料的文件夹（D\MyBlog）右键选择 Git Bash Here 输入以下命令生成SSH密钥：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen -t rsa -C &quot;your email@example.com&quot;     //你注册github的邮箱地址<br></code></pre></td></tr></table></figure><p> <img src="https://gitee.com/divemaven/git-project/raw/master/202109261748673.png" alt="image-20210926174827595"></p><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">clip &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>或者使用Git GUI here查看SSH key</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261800725.png" alt="image-20210926180011638"></p><h6 id="3-3-2、-Github-配置SSH-密钥"><a href="#3-3-2、-Github-配置SSH-密钥" class="headerlink" title="3.3.2、 Github 配置SSH 密钥"></a>3.3.2、 Github 配置SSH 密钥</h6><p>登陆 GitHub，进入 Settings；点击 SSH and GPG Keys； 选择 New SSH key：粘贴密钥：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261755187.png" alt="image-20210926175547005"></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109261803881.png" alt="image-20210926180317770"></p><h6 id="3-3-3-、测试"><a href="#3-3-3-、测试" class="headerlink" title="3.3.3 、测试"></a>3.3.3 、<strong>测试</strong></h6><p>输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh -T git@github.com <br></code></pre></td></tr></table></figure><p>注意：<a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>不要做任何更改！执行命令后显示successfully，表明连接成功。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110151454584.png" alt="image-20211015145353488"></p><h6 id="3-3-4、配置-Git-个人信息"><a href="#3-3-4、配置-Git-个人信息" class="headerlink" title="3.3.4、配置 Git 个人信息"></a>3.3.4、配置 Git 个人信息</h6><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global user.name &quot;keepdive&quot; //你注册github用户名<br>git config --global user.email  &quot;xxxx@gmail.com&quot;//填写你的github注册邮箱<br><br></code></pre></td></tr></table></figure><h5 id="3-4、修改-config-yml配置文件"><a href="#3-4、修改-config-yml配置文件" class="headerlink" title="3.4、修改_config.yml配置文件"></a>3.4、修改_config.yml配置文件</h5><p>登录Github查看你的仓库地址。选择你之前创建的仓库，拷贝仓库地址。需要在_config.yml文件中配置仓库地址。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271016056.png" alt="image-20210927101634951"></p><p>打开你创建的 MyBlog、 文件夹（如：D\Myblog），右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 配置文件。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109270948989.png" alt="image-20210927094837919"></p><p>按下图修改 _config.yml 文件并保存。注意yml格式的文件在标签后面要加个空格。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109270955179.png" alt="image-20210927095506129"></p><h5 id="3-5、部署博客到GitHub"><a href="#3-5、部署博客到GitHub" class="headerlink" title="3.5、部署博客到GitHub"></a>3.5、部署博客到GitHub</h5><p>安装github一键部署插件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-deployer-git --save  //安装部署插件<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109270943867.png" alt="image-20210927094311809"></p><p>在你博客的存储位置（D:\MyBlog）文件夹下分别执行以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">hexo clean//清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>hexo g -d   //生成静态文件后立即部署网站<br></code></pre></td></tr></table></figure><p> 出现以下信息说明部署成功。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271120535.png" alt="image-20210927112007493"></p><p><strong>访问博客</strong></p><p>到目前为止，我们的线上博客就成功搭建了，其他人也能够访问我们的博客。</p><p>你的博客地址：https://你的用户名.github.io，比如我的是：<a href="https://keepdive.github.io/">https://keepdive.github.io</a> ,欢迎大家访问交流学习。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271049411.png" alt="image-20210927104943089"></p><h4 id="四、个性化博客"><a href="#四、个性化博客" class="headerlink" title="四、个性化博客"></a>四、个性化博客</h4><h5 id="4-1、为博客更换自己喜欢的主题"><a href="#4-1、为博客更换自己喜欢的主题" class="headerlink" title="4.1、为博客更换自己喜欢的主题"></a>4.1、为博客更换自己喜欢的主题</h5><p>博客也搭建好了，但是！！！默认的主题并不喜欢怎么办？现在，我们就来为自己的博客更换自己喜欢的主题</p><p><a href="https://hexo.io/themes/">点击此处</a>进入 Hexo 官网的主题专栏，我们可以看见有许多的主题供我们选择。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271059191.png" alt="image-20210927105901880"></p><p>我这里选择的是fluid主题，比较简洁。所以以此为例：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271059154.png" alt="image-20210927105955010"></p><p>选择之后会跳转到主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub仓库</a>。我们要做的就是获取主题的clone地址，把主题克隆到本地文件夹。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271112818.png" alt="image-20210927111225619"></p><p>打开 MyBlog文件夹下的 themes 目录（如：D:\MyBlog\themes），右键 Git Bash Here，输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">git clone https://github.com/fluid-dev/hexo-theme-fluid.git hexo-theme-fluid   //克隆主题到本地<br></code></pre></td></tr></table></figure><p>下载完成后即可在 themes 目录下生成 hexo-theme-fluid 文件夹。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271130478.png" alt="image-20210927113022426"></p><p>然后退回到D:\MyBlog文件夹，修改_config.yml文件。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109270948989.png" alt="image-20210927094837919"></p><p>修改标题、语言和主题。</p><p>找到关键字 title， 修改参数为KeepDive（修改成你想改的名字）。</p><p>找到关键字 language， 修改参数为zh-CN。</p><p>找到关键字 theme， 修改参数为hexo-theme-fluid。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271141503.png" alt="image-20210927114106448"></p><p>返回D:\MyBlog目录，右键 Git Bash Here ，输入以下命令开始本地部署主题：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">hexo g  //生成静态文件。<br>hexo s//启动服务器。默认情况下，访问网址为： http://localhost:<span class="hljs-number">4000</span>/。<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271147408.png" alt="image-20210927114734339"></p><p>此时打开浏览器，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可看见我们的主题已经更换了，如果感觉效果满意，我们就可以把它部署到Github上了。部署到GitHub可能会有延迟，先在本地看一下。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271148834.png" alt="image-20210927114809490"></p><p>部署到GitHub上，打开地址<a href="https://keepdive.github.io/">KeepDive.github.io</a></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271426029.png" alt="image-20210927142615813"></p><p>此时访问自己的博客即可看见更换后的主题，</p><p>但我们仍然需要对主题的相关配置进行修改，比如网站标题，图标等等，</p><p>Hexo 中有两份主要的配置文件，名称都是 _config.yml ，它们均是用于站点配置使用的。</p><p>其中，一份位于站点根目录下（比如我的：D:\MyBlog\_config.yml），主要包含 Hexo 本身整站的配置；</p><p>另一份位于主题目录下（比如我的：D:\MyBlog\themes\hexo-theme-fluid\_config.yml），</p><p>这份配置由主题作者提供，主要用于配置主题相关的选项，一般 _config.yml 文件里都有相关注释，按需修改即可。</p><p>更多关于主题配置，请查看<a href="https://hexo.fluid-dev.com/docs/guide/">fluit主题配置指南</a>。</p><h5 id="4-2、为博客配置自定义域名"><a href="#4-2、为博客配置自定义域名" class="headerlink" title="4.2、为博客配置自定义域名"></a>4.2、为博客配置自定义域名</h5><h6 id="4-2-1、购买域名"><a href="#4-2-1、购买域名" class="headerlink" title="4.2.1、购买域名"></a>4.2.1、购买域名</h6><p>首先去域名注册商，像阿里云或者腾讯云之类的域名注册商处，注册域名，新客一般都有优惠，</p><p>例如像腾讯云的，目前新客户域名只要1元<a href="https://cloud.tencent.com/act/domainsales?from=dnspodqcloud">腾讯云域名</a>。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271449627.png" alt="image-20210927144655429"></p><h6 id="4-2-2、域名解析"><a href="#4-2-2、域名解析" class="headerlink" title="4.2.2、域名解析"></a>4.2.2、域名解析</h6><p>购买域名后要做域名解析，这里以腾讯云为例。<a href="!%5B%5D(https://gitee.com/divemaven/git-project/raw/master/202109271449627.png)">登录DNS解析控制台</a>,如果实在不懂含义，<strong>主机类型</strong>和<strong>记录类型</strong>就照抄，但是记录值，得填你自己的域名，就是你部署博客之后，在浏览器输入域名可以正常访问的域名，不用带http。</p><p>注意：这里的解析时间是600秒，所以需要10分钟之后才会生效，请耐心等待一下。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271455864.png" alt="image-20210927145513663"></p><h6 id="4-2-3、去GitHub的仓库配置自定义域名"><a href="#4-2-3、去GitHub的仓库配置自定义域名" class="headerlink" title="4.2.3、去GitHub的仓库配置自定义域名"></a>4.2.3、去GitHub的仓库配置自定义域名</h6><p>按下图操作配置。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271504259.png" alt="image-20210927150411080"></p><p>保存成功后的样子。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271507798.png" alt="image-20210927150747644"></p><h6 id="4-2-4、解决自定义域名，每次发版都需要重新配置的问题。"><a href="#4-2-4、解决自定义域名，每次发版都需要重新配置的问题。" class="headerlink" title="4.2.4、解决自定义域名，每次发版都需要重新配置的问题。"></a>4.2.4、解决自定义域名，每次发版都需要重新配置的问题。</h6><p>截止目前，自定义域名是配好了。</p><p><strong>但是有个问题</strong>：</p><p>hexo 每次发布后需要手动在 github page 的 setting 里重新设置自定义域名。</p><p><strong>解决方法：</strong></p><p>在博客目录下的source文件夹（D:\MyBlog\source）新增一个CNAME文件就可以了。在CNAME新增内容，把你在GitHub Pages配好的那个域名填进去。例如我的就是把blog.keepdive.com填进去。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271516954.png" alt="image-20210927151613870"></p><p>执行以下命令，重新部署博客到GitHub Pages.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">hexo clean//清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>hexo g -d   //生成静态文件后立即部署网站<br></code></pre></td></tr></table></figure><p><strong>使用自定义域名访问博客</strong></p><p>在浏览器输入自定义域名，访问博客。比如我的是：<a href="https://blog.keepdive.com/">https://blog.keepdive.com/</a> ,欢迎大家访问交流学习。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271526051.png" alt="image-20210927152601729"></p><h5 id="4-3、为博客配置图床（gitee）"><a href="#4-3、为博客配置图床（gitee）" class="headerlink" title="4.3、为博客配置图床（gitee）"></a>4.3、为博客配置图床（gitee）</h5><h6 id="4-3-1、注册gitee"><a href="#4-3-1、注册gitee" class="headerlink" title="4.3.1、注册gitee"></a>4.3.1、注册gitee</h6><p>gitee官网：<a href="https://gitee.com/">https://gitee.com/</a></p><p>为什么不推荐GitHub呢？</p><p>因为通过GitHub搭建的图床，虽然能正常上传，但是在markdown中无法正常加载图片，不太适合我们作为写作的图床，也可能有对应的解决方案，只是我不知道而已。主要原因是它存储的那台服务器，在国内被墙了，无法解析。</p><p>gitee和github本质上是一样的，都是创建仓库，用来保存数据。</p><h6 id="4-3-2、创建图床仓库"><a href="#4-3-2、创建图床仓库" class="headerlink" title="4.3.2、创建图床仓库"></a>4.3.2、创建图床仓库</h6><p>进入gitee首页后，点击+号创建图床仓库。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271614015.png" alt="image-20210927161422839"><br>出现如下图的界面，项目才创建完成了，一定要注意哦！</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271616887.png" alt="image-20210927161650725"></p><h6 id="4-3-3、设置私人令牌"><a href="#4-3-3、设置私人令牌" class="headerlink" title="4.3.3、设置私人令牌"></a>4.3.3、设置私人令牌</h6><p>按下图中的步骤操作</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271627653.png" alt="image-20210927162702485"></p><p><strong>得到私人令牌（Token）</strong></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271629014.png" alt="image-20210927162948945"></p><p>到此，码云图床相关的配置已经设置完成，记住私人令牌，<strong>请务必保存好此私人令牌，关闭之后，将不会再显示，也无法查看</strong>。</p><h6 id="4-3-4、下载和配置PicGo图床"><a href="#4-3-4、下载和配置PicGo图床" class="headerlink" title="4.3.4、下载和配置PicGo图床"></a>4.3.4、下载和配置PicGo图床</h6><p>一款功能非常强大的图床的工具，支持<code>SM.MS</code>、<code>腾讯COS</code>、<code>GitHub图床</code>、<code>七牛云图床</code>、<code>Imgur图床</code>、<code>阿里云OSS</code>、<code>又拍云图床</code>、<code>gitee</code>等多种图床平台；</p><p>PicGo默认使用的是SMMS图床：<a href="https://sm.ms/">https://sm.ms/</a> ；如果你没有配置好上面的github图床或者gitee图床，且图片也并不那么重要且可以公开，也可以直接使用默认的SMMS图床来管理图片即可。</p><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><strong>特点</strong></p><p>要说特点，PicGO<strong>最大的特点是，可以和Typora结合使用</strong>，配置好关联之后，Typora写文章时，如果需要穿插图片，只需要将图片复制粘贴到Typora的编辑区域，就自动通过PicGo上传到指定图床，得到外网能访问的URL并展示；如果没有网络的情况下，也能通过PicGo暂存在本地，等有网络的时候，再次进行上传即可。关联配置后面会专门讲解。</p><p><strong>PicGo配置gitee图床</strong></p><p>安装插件</p><p>默认情况下PicGo是不支持gitee的，所以需要第三方插件来支持。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271635246.png" alt="image-20210927163531159"></p><p><strong>配置gitee图床地址及私人令牌</strong></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271642078.png" alt="image-20210927164218993"></p><h6 id="4-3-5、Typora关联PicGo"><a href="#4-3-5、Typora关联PicGo" class="headerlink" title="4.3.5、Typora关联PicGo"></a>4.3.5、Typora关联PicGo</h6><p><strong>安装Typora</strong></p><p>Markdown教程及Typora安装：<a href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></p><p><strong>安装Snipaste</strong></p><p>Snipaste官网：<a href="https://www.snipaste.com/">https://www.snipaste.com/</a></p><p><strong>配置Typora</strong></p><p>按以下步骤配置Typora</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271704100.png" alt="image-20210927170418947"></p><p>如果提示成功，说明关联就已经正常了</p><p><strong>整体测试</strong></p><p>经过上面的一系列配置之后，就可以使用Markdown开始写文章了；图片这些，截图粘贴之后，就自动通过PicGo上传到了远端图床，效果如下：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271707248.png" alt="image-20210927170752183"></p><p>至此，我们就可以专心写文章了，再也不用花精力去处理图片，排版这些琐碎、耗时的工作。</p><h5 id="4-4、为博客配置gitbook"><a href="#4-4、为博客配置gitbook" class="headerlink" title="4.4、为博客配置gitbook"></a>4.4、为博客配置gitbook</h5><h6 id="4-4-1、什么是gitbook？"><a href="#4-4-1、什么是gitbook？" class="headerlink" title="4.4.1、什么是gitbook？"></a>4.4.1、什么是gitbook？</h6><p><strong>GitBook 是一个基于 <a href="https://baike.baidu.com/item/Node.js">Node.js</a> 的命令行工具，可使用 <a href="https://baike.baidu.com/item/Github">Github</a>/<a href="https://baike.baidu.com/item/Git/12647237">Git</a> 和 <a href="https://baike.baidu.com/item/Markdown">Markdown</a>（或AsciiDoc） 来制作精美的电子书，GitBook 并非关于 Git 的教程。</strong></p><p><strong>GitBook支持输出多种文档格式：</strong></p><ul><li><p>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上；</p></li><li><p><a href="https://baike.baidu.com/item/PDF">PDF</a>：需要安装gitbook-pdf依赖；</p></li><li><p><a href="https://baike.baidu.com/item/eBook">eBook</a>：需要安装ebook-convert；</p></li><li><p>单<a href="https://baike.baidu.com/item/HTML">HTML</a>网页：支持将内容输出为单页的HTML，不过一般用在将<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6%E6%A0%BC%E5%BC%8F/5219840">电子书格式</a>转换为PDF或eBook的中间过程；</p></li><li><p><a href="https://baike.baidu.com/item/JSON">JSON</a>：一般用于电子书的调试或元数据提取。</p></li></ul><p>使用GitBook制作电子书，必备两个文件：<em><strong>README.md</strong></em>和<em><strong>SUMMARY.md</strong></em></p><h6 id="4-4-2、安装gitbook"><a href="#4-4-2、安装gitbook" class="headerlink" title="4.4.2、安装gitbook"></a>4.4.2、安装gitbook</h6><p><strong>要求</strong></p><p>安装 GitBook 简单明了。您的系统只需要满足以下两个要求：</p><ul><li>NodeJS（推荐v4.0.0及以上）</li><li>Windows、Linux、Unix 或 Mac OS X</li></ul><p><strong>使用 NPM 安装</strong></p><p>安装 GitBook 的最佳方式是通过<strong>NPM</strong>。在终端提示符下，只需运行以下命令即可安装 GitBook</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">npm install gitbook-cli -g<br></code></pre></td></tr></table></figure><p>安装完成之后，你可以使用下面的命令来检验是否安装成功。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">gitbook -V<br></code></pre></td></tr></table></figure><p><strong>问题</strong></p><p>1、一直卡在Installing GitBook 3.2.3的页面。</p><p>2、出现安装gitbook报错，提示cb.apply is not a function。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110151625069.png" alt="image-20211015162504007"></p><p><strong>原因</strong></p><p>1、由于安装过程默认使用国外镜像导致。</p><p>2、cb.apply is not a function，主要是gitbook-cli<code>引用了</code>旧版的graceful-fs。Node.JS版本过高。</p><p><strong>解决方法</strong></p><p>1、执行以下命令，设置镜像源为淘宝。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">npm config <span class="hljs-built_in">set</span> registry=http://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>执行以下命令，查看是否修改成功。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110151649028.png" alt="image-20211015164939983"></p><p>2、node.js版本降级,<strong>下载NVM for Windows</strong>.(切记 nvm的安装路径 ：不要有汉字，不要有空格。不，应该要有良好的习惯那就是)</p><p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110191514832.png" alt="image-20211019151424752"></p><p>3、安装完成后，使用nvm下载低版本的nodejs。我这里下的是10.23.1版本。执行以下命令安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CDM">nvm install 10.23.1<br></code></pre></td></tr></table></figure><p>4、执行以下命令，切换nodejs版本。（<strong>使用管理员权限，不然会报错。</strong>）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use <span class="hljs-number">10</span>.<span class="hljs-number">23</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110191517672.png" alt="image-20211019151742623"></p><p>再次执行<code>gitbook -V</code>，显示版本正常。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">gitbook -V<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202110191544509.png" alt="image-20211019154447453"></p><h6 id="4-4-3、创建一本电子书"><a href="#4-4-3、创建一本电子书" class="headerlink" title="4.4.3、创建一本电子书"></a>4.4.3、创建一本电子书</h6><p><strong>GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">gitbook init<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111021428683.png" alt="image-20211102142820562"></p><p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录。</p><p>接下来，我们输入 <code>gitbook serve</code> 命令，然后在浏览器地址栏中输入 <code>http://localhost:4000</code> 便可预览书籍。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111021431042.png" alt="image-20211102143133969"></p><p>运行该命令后会在书籍的文件夹中生成一个 <code>_book</code> 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">gitbook build<br></code></pre></td></tr></table></figure><h6 id="4-4-4、目录结构"><a href="#4-4-4、目录结构" class="headerlink" title="4.4.4、目录结构"></a>4.4.4、目录结构</h6><p>GitBook 基本的目录结构如下所示：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby">.<br>├── book.json<br>├── README.md<br>├── SUMMARY.md<br>├── chapter-<span class="hljs-number">1</span>/<br><span class="hljs-params">|   ├── README.md</span><br><span class="hljs-params">|</span>   └── something.md<br>└── chapter-<span class="hljs-number">2</span>/<br>    ├── README.md<br>    └── something.md<br></code></pre></td></tr></table></figure><p>下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。</p><h3 id="book-json"><a href="#book-json" class="headerlink" title="book.json"></a>book.json</h3><p>该文件主要用来存放配置信息，我先放出我的配置文件。</p><h4 id="五、问题解答"><a href="#五、问题解答" class="headerlink" title="五、问题解答"></a>五、问题解答</h4><p>配置过程中，有任何问题都可以添加我微信交流，我帮你解决。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202109271723195.png" alt="image-20210927172320125"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小白</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/11/hello-world/"/>
    <url>/2021/11/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA开发环境配置</title>
    <link href="/2021/11/09/IDEA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/11/09/IDEA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="IDEA开发环境基本配置"><a href="#IDEA开发环境基本配置" class="headerlink" title="IDEA开发环境基本配置"></a>IDEA开发环境基本配置</h3><h4 id="IDEA介绍"><a href="#IDEA介绍" class="headerlink" title="IDEA介绍"></a>IDEA介绍</h4><p>IntelliJ IDEA（简称 IDEA），是 Java 语言开发的集成环境，IDEA 在业界被公认为最好的 Java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、各类版本工具（Git、SVN、GitHub 等）、JUnit、CVS 整合、代码分析和创新的 GUI 设计等方面的功能都值得称道。</p><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><p>通过本文的学习，您将可以：</p><ul><li>掌握IDEA字体设置</li><li>掌握IDEA编码设置</li><li>掌握IDEA配置Maven</li><li>掌握IDEA配置JDK</li><li>选择合适的IDEA插件提升开发效率</li><li>开启IDEA之旅</li></ul><h4 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h4><ul><li>IDEA版本：IntelliJ IDEA 2021.2.1(UItimate Edition)</li><li>JDK：1.8</li><li>Maven：3.3.9</li></ul><h4 id="一、字体设置"><a href="#一、字体设置" class="headerlink" title="一、字体设置"></a>一、字体设置</h4><p><strong>字体和字体大小根据个人喜好选择。</strong></p><h5 id="1-1-界面字体设置"><a href="#1-1-界面字体设置" class="headerlink" title="1.1 界面字体设置"></a>1.1 界面字体设置</h5><p>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091155800.png" alt="image-20211109115525655"></p><h5 id="1-2-程序字体设置"><a href="#1-2-程序字体设置" class="headerlink" title="1.2 程序字体设置"></a>1.2 程序字体设置</h5><p>File -&gt; Settings -&gt;Editor  -&gt; Font</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091201305.png" alt="image-20211109120139120"></p><h4 id="二、编码设置"><a href="#二、编码设置" class="headerlink" title="二、编码设置"></a>二、编码设置</h4><p><strong>任何开发统一编码都是第一步，为了解决中文编码，这里统一设为UTF-8。</strong></p><h5 id="2-1-全局编码设置"><a href="#2-1-全局编码设置" class="headerlink" title="2.1 全局编码设置"></a>2.1 全局编码设置</h5><p>File -&gt; Settings -&gt; Editor  -&gt; File Encodings</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091209495.png" alt="image-20211109120943329"></p><h5 id="2-2-文件编码设置"><a href="#2-2-文件编码设置" class="headerlink" title="2.2 文件编码设置"></a>2.2 文件编码设置</h5><p>打开需要设置编码的文件</p><p>在右下角进行设置</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091213298.png" alt="image-20211109121329236"></p><h4 id="三、JDK设置"><a href="#三、JDK设置" class="headerlink" title="三、JDK设置"></a>三、JDK设置</h4><p>File -&gt;Project Structure -&gt; Project Settings -&gt; Project</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091507073.png" alt="image-20211109150744909"></p><h4 id="四、Maven设置"><a href="#四、Maven设置" class="headerlink" title="四、Maven设置"></a>四、Maven设置</h4><p>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091504134.png" alt="image-20211109150446946"></p><h4 id="五、插件安装"><a href="#五、插件安装" class="headerlink" title="五、插件安装"></a>五、插件安装</h4><p>所有插件都是在 File -&gt; Settings -&gt; plugins里进行搜索安装。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091533761.png" alt="image-20211109153332583"></p><h5 id="5-1-Alibaba-Java-Coding-Guidelines"><a href="#5-1-Alibaba-Java-Coding-Guidelines" class="headerlink" title="5.1 Alibaba Java Coding Guidelines"></a>5.1 <strong>Alibaba Java Coding Guidelines</strong></h5><p>阿里巴巴的编码规约检查插件</p><p>检查你的编码习惯，让你更规范</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091536017.png" alt="image-20211109153624892"></p><h5 id="5-2-Codota"><a href="#5-2-Codota" class="headerlink" title="5.2 Codota"></a>5.2 <strong>Codota</strong></h5><p>代码提示工具，扫描你的代码后，根据你的敲击完美提示</p><p>Codota基于数百万个开源Java程序和您的上下文来完成代码行，从而帮助您以更少的错误更快地进行编码。</p><p>网站 <a href="https://www.codota.com/">https://www.codota.com/</a></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091537550.png" alt="image-20211109153731383"></p><h5 id="5-3-RESTfultoolkit"><a href="#5-3-RESTfultoolkit" class="headerlink" title="5.3 RESTfultoolkit"></a>5.3 <strong>RESTfultoolkit</strong></h5><p>一套 RESTful 服务开发辅助工具集。</p><ol><li>根据 URL 直接跳转到对应的方法定义 ( Ctrl \ or Ctrl Alt N );</li><li>提供了一个 Services tree 的显示窗口;</li><li>一个简单的 http 请求工具;</li><li>在请求方法上添加了有用功能: 复制生成 URL;,复制方法参数…</li><li>其他功能: java 类上添加 Convert to JSON 功能，格式化 json 数据 ( Windows: Ctrl + Enter; Mac: Command + Enter )。</li></ol><p>支持 Spring 体系 (Spring MVC / Spring Boot)</p><p>支持 JAX-RS</p><p>支持 Java 和 Kotlin 语言。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091546827.png" alt="image-20211109154606698"></p><h5 id="5-4-GenerateAllSetter"><a href="#5-4-GenerateAllSetter" class="headerlink" title="5.4 GenerateAllSetter"></a>5.4 <strong>GenerateAllSetter</strong></h5><p>快速生成get set</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091548315.png" alt="image-20211109154800176"></p><h5 id="5-5-MyBatisCodeHelperPro-收费"><a href="#5-5-MyBatisCodeHelperPro-收费" class="headerlink" title="5.5  MyBatisCodeHelperPro(收费)"></a>5.5  MyBatisCodeHelperPro(收费)</h5><p>最好的Mybatis代码提示，完整支持Mybatis动态sql代码提示，代码检测，写sql几乎所有地方都有代码提示</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091556570.png" alt="image-20211109155629419"></p><h5 id="5-6-Json-Parser"><a href="#5-6-Json-Parser" class="headerlink" title="5.6 **Json Parser **"></a>5.6 **Json Parser **</h5><p>厌倦了打开浏览器来格式化和验证JSON？为什么不安装JSON Parser并在具有脱机支持的IDE内进行呢？JSON Parser是用于验证和格式化JSON字符串的轻量级插件。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091558358.png" alt="image-20211109155855221"></p><h5 id="5-7-MyBatis-Log-Free-免费版"><a href="#5-7-MyBatis-Log-Free-免费版" class="headerlink" title="5.7 MyBatis Log  Free(免费版)"></a>5.7 <strong>MyBatis Log  Free</strong>(免费版)</h5><p>根据执行sql 替换掉 ？显示完整 sql, 直接复制粘贴到数据库就可以执行</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091559718.png" alt="image-20211109155955581"></p><h5 id="5-8-Translation"><a href="#5-8-Translation" class="headerlink" title="5.8 Translation"></a>5.8 <strong>Translation</strong></h5><p>翻译插件，灰常牛逼。翻译中文，给接口起名字就不用费劲啦！</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091602209.png" alt="image-20211109160234067"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二、Spring Cloud基础入门</title>
    <link href="/2021/11/08/%E4%BA%8C%E3%80%81Spring-Cloud%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2021/11/08/%E4%BA%8C%E3%80%81Spring-Cloud%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="二、Spring-Cloud基础入门"><a href="#二、Spring-Cloud基础入门" class="headerlink" title="二、Spring Cloud基础入门"></a>二、Spring Cloud基础入门</h3><h4 id="学习目录"><a href="#学习目录" class="headerlink" title="学习目录"></a>学习目录</h4><ul><li>通过本文的学习，您将可以: </li><li>了解Spring Boot概念和Spring Cloud概念 </li><li>掌握Spring Boot和Spring Cloud的区别 </li><li>了解Spring Cloud常用组件 </li><li>学会开发一个Spring Cloud程序 </li><li>了解服务间的通信方式</li></ul><h4 id="第一章-Spring-Boot的介绍"><a href="#第一章-Spring-Boot的介绍" class="headerlink" title="第一章  Spring Boot的介绍"></a>第一章  Spring Boot的介绍</h4><p>在明白了微服务是什么的基础上，我们接下来看一下到底什么是Spring Boot? Spring Boot跟微服务又有些什么联系？让我们带着这些问题进入Spring Boot的内容学习。</p><h5 id="1-1-什么是Spring-Boot"><a href="#1-1-什么是Spring-Boot" class="headerlink" title="1.1 什么是Spring Boot"></a>1.1 什么是Spring Boot</h5><ul><li><p>开发团队：是由Pivotal团队提供的全新框架。</p></li><li><p>设计目标：简化新Spring应用的初始搭建以及开发过程。</p><ul><li><p>Spring Boot框架使用了特定的方式来进行配置，使开发人员不再需要定义样板化的配置。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081719032.png" alt="image-20211108171933988"></p></li><li><p>简单来说：Spring Boot整合了许多优秀的框架，不需要用户手动的去写一堆xml配置 ，再进行配置。</p></li></ul></li><li><p> 首先我们看一下什么是Spring Boot。</p></li><li><p>Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p></li><li><p>Spring Boot相当于Java开发中使用的Maven。</p></li><li><p><strong>Spring Boot的四个核心：</strong></p><ol><li><strong>自动配置</strong></li><li> <strong>起步依赖</strong></li><li> <strong>命令行界面</strong></li><li> <strong>Actuator监控</strong></li></ol></li><li><p>Spring Boot将很多魔法带入了Spring应用程序的开发之中，其中最重要的是以下四个核心。</p><ul><li><p><strong>自动配置</strong>：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置，对于开发人员还需要添加相应jar包，不再需要复杂的xml配置就可以实现功能。</p></li><li><p><strong>起步依赖</strong>：告诉Spring Boot需要什么功能，它就能引入需要的库。开发人员不再需要把依赖一个个添加进来，只需要添加对应的starter包依赖就可以解决复杂的依赖问题。</p></li><li><p><strong>命令行界面</strong>：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建，可以在命令行界面快速构建应用。</p></li><li><p><strong>Actuator监控</strong>：让你能够深入运行中的Spring Boot应用程序，一探究竟。添加actuator依赖后，通过在actuator包中预定义好的url，可以很快速的获取应用的运行信息，比如通过 “/autoconfig”可以查看自动配置的使用情况，“/health” 查看应用健康指标，“/env” 查看所有环境变量。</p></li></ul></li></ul><h5 id="1-2-开发第一个Spring-Boot应用程序"><a href="#1-2-开发第一个Spring-Boot应用程序" class="headerlink" title="1.2 开发第一个Spring Boot应用程序"></a>1.2 开发第一个Spring Boot应用程序</h5><ul><li><p>开发的基本流程和步骤：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081729025.png" alt="image-20211108172952981"></p></li><li><p>接下来我将带领大家开发第一个Spring Boot的应用程序</p></li></ul><h6 id="1-2-1-环境准备"><a href="#1-2-1-环境准备" class="headerlink" title="1.2.1 环境准备"></a>1.2.1 环境准备</h6><ul><li><p>环境准备：</p><ul><li><p>JDK1.8</p></li><li><p> Maven版本：3.3.9</p></li><li><p>修改setting配置为国内下载镜像</p></li><li><p>Maven编码过程中需要下载依赖，需要网络环境</p></li><li><p>Eclipse或者IDEA</p><ul><li>字符集编码：UTF-8</li></ul></li></ul></li><li><p>在真正开发Spring Boot项目之前我们要确保我们的环境是一致，以免中途发生一些意想不到的问题；</p><ul><li>首先我们是用的是jdk1.8版本，使用Eclipse或者IDEA作为开发工具（我们演示的使用采用 Eclipse Oxygen 作为开发工具），目前新版的开发工具中已经集成了Maven，我们只需要修 改Maven的Setting配置文件（主要是修改本地仓库位置，国内下载镜像）。</li><li>默认情况下Maven的下载地址为国外的站点，依赖包的下载非常缓慢。当然由于要下载相关的依赖包，所以需要有网络环境</li><li>使用Eclipse或者IDEA时建议大家把编码都改为UTF-8，以避免一些乱码问题。</li></ul></li></ul><h6 id="1-2-2创建Maven工程并添加依赖"><a href="#1-2-2创建Maven工程并添加依赖" class="headerlink" title="1.2.2创建Maven工程并添加依赖"></a>1.2.2创建Maven工程并添加依赖</h6><ul><li>步骤一：<ul><li>使用IDEA创建Maven项目工程<ul><li><p>file -&gt; new -&gt; project -&gt; Maven</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091641559.png" alt="image-20211109164143370"></p></li><li><p>详细信息<img src="https://gitee.com/divemaven/git-project/raw/master/202111091643315.png" alt="image-20211109164356217"></p></li></ul></li></ul></li></ul><ul><li>项目创建成功后结构如下图，图中的最后一个文件pom.xml就是maven的核心配置文件，后面我们大量的依赖配置都需要在这个配置文件中进行。<img src="https://gitee.com/divemaven/git-project/raw/master/202111091647471.png" alt="image-20211109164751372"></li></ul><ul><li><p>步骤二：</p><ul><li><p>修改项目根目录下的pom.xml配置文件，添加SpringBoot依赖</p></li><li><p>在pom.xml配置文件中的dependencies节点下添加依赖，添加内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.11.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>在pom.xml配置文件中添加Spring Boot的依赖，这里我们统一Spring Boot的依赖版本为 1.5.11.RLEASE。</p></li></ul><h6 id="1-2-3-开发主程序（启动类）"><a href="#1-2-3-开发主程序（启动类）" class="headerlink" title="1.2.3 开发主程序（启动类）"></a>1.2.3 开发主程序（启动类）</h6><ul><li><p>步骤三：</p><ul><li>开发主程序：<ul><li>在src/main/java中新建包com.test</li><li>在com.test包中新建类FirstDemoApplication</li></ul></li></ul><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091759215.png" alt="image-20211109175944160"></p></li><li><p>在src/main/java中新建包，com.test（这里包的名字大家可以随便建，能识别即可）；</p></li><li><p>编写主程序：</p><ul><li><p>编写FirstDemoApplication 类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstDemoApplication</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(FirstDemoApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>开发程序的启动类FirstDemoApplication ；此类主要用于Spring Boot应用程序的启动，程序的入口就是这里了；在运行FirstDemoApplication 类时会进入main方法的调用，然后再main方法中启动了SpringApplication；</p></li><li><p>此处注意一定要添加@SpringBootApplication注解</p></li><li><p>详细代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstDemoApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(FirstDemoApplication.class, args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h6 id="1-2-4-开发Controller"><a href="#1-2-4-开发Controller" class="headerlink" title="1.2.4 开发Controller"></a>1.2.4 开发Controller</h6><ul><li><p>步骤四：</p><ul><li><p>在FirstDemoApplication 类项目包下新建HelloController类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>开发Controller程序，用于实现业务方法。</p></li><li><p> 详细代码如下：</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="1-2-5-启动主程序"><a href="#1-2-5-启动主程序" class="headerlink" title="1.2.5  启动主程序"></a>1.2.5  启动主程序</h6><ul><li><p>步骤五：</p><ul><li><p>运行FirstDemoApplication 类，控制台打印如下内容表示启动成功</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091838730.png" alt="image-20211109183820550"></p></li></ul></li><li><p>运行FirstDemoApplication 类；在IDEA中使用鼠标右键-》RUN ‘FirstDemoApplication ’就可以 启动SpringBoot应用程序。这里的基本配置，以及启动方法在后面会大量用到，所以大家一定要掌握。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091841057.png" alt="image-20211109184142951"></p></li></ul><h6 id="1-2-6-浏览器访问测试"><a href="#1-2-6-浏览器访问测试" class="headerlink" title="1.2.6 浏览器访问测试"></a>1.2.6 浏览器访问测试</h6><ul><li><p>步骤六：</p><ul><li><p>在浏览器中输入<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 就可以看到我们写的第一个Spring Boot应用内容。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091843364.png" alt="image-20211109184341321"></p></li></ul></li></ul><h6 id="1-2-7-项目完整结构"><a href="#1-2-7-项目完整结构" class="headerlink" title="1.2.7  项目完整结构"></a>1.2.7  项目完整结构</h6><ul><li><p>项目完整截图如下：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111091845246.png" alt="image-20211109184510193"></p></li><li><p>项目的完整结构如上图，Spring Boot项目的创建跟普通maven项目创建是一致的，然后添加 Spring Boot依赖，启动类，业务Controller就完成了我们第一个Spring Boot项目的创建。步骤很简单，大家一定要掌握。</p></li></ul><h5 id="1-3-Spring-Boot的示例"><a href="#1-3-Spring-Boot的示例" class="headerlink" title="1.3 Spring Boot的示例"></a>1.3 Spring Boot的示例</h5><ul><li><p>接收客户端参数</p></li><li><p>Spring Boot配置文件</p></li><li><p>FirstDemo项目如何接收前端传递的参数呢？</p></li><li><p>我们都知道tomcat默认的端口是8080，如果我们8080端口被占用了，我们如何修改Spring  Boot项目的端口呢？</p></li><li><p>接下来我将以上面2个案例为大家解决参数接收，自动重启，配置文件中修改端口问题。</p></li><li><p>注意后面的2个案例都是以FirstDemo作为基础</p></li></ul><h6 id="1-3-1-接收客户端参数"><a href="#1-3-1-接收客户端参数" class="headerlink" title="1.3.1 接收客户端参数"></a>1.3.1 接收客户端参数</h6><ul><li>接收客户端参数：<ul><li>在FirstDemo项目中的HelloController类中新增一个处理前端参数的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello/&#123;name&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果需要接受浏览器传递的参数，在使用Spring Boot项目我们很容易就可以解决这个问题；</p><ul><li>路径传参，如上面代码我们使用的是路径传参数，其中“{name}”就是参数；在 @RequestMapping中定义访问路径以及参数后，我们需要方法参数中添加 “@PathVariable String name”，这里注意“@PathVariable String name”中的name要 跟“@RequestMapping(“/hello/{name}”)”中的name一致。</li></ul></li><li><p>上面的代码演示了从浏览器接收参数并回显到浏览器界面。</p></li><li><p>浏览器访问测试：</p><ul><li>在浏览器中访问 <a href="http://localhost:8080/hello/keepdive%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">http://localhost:8080/hello/keepdive，显示如下图：</a></li></ul></li></ul><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101100206.png" alt="image-20211110110025158"></p><ul><li>上面<a href="http://localhost:8080/hello/keepdive%E9%93%BE%E6%8E%A5%E4%B8%AD%E2%80%9Ckeepdive%E2%80%9D%E5%B0%B1%E6%98%AF%E5%8F%82%E6%95%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA%E4%BA%86">http://localhost:8080/hello/keepdive链接中“keepdive”就是参数，所以在浏览器显示了</a> “hello keepdive”        </li></ul><h6 id="1-3-2-Spring-Boot配置文件"><a href="#1-3-2-Spring-Boot配置文件" class="headerlink" title="1.3.2  Spring Boot配置文件"></a>1.3.2  Spring Boot配置文件</h6><ul><li><p>SpringBoot配置文件默认可以放到以下目录中，可以实现自动读取：</p><ul><li><p>项目的resources目录下</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101117483.png" alt="image-20211110111709413"></p></li></ul></li><li><p>在介绍修改应用端口之前，我们先看一下Spring Boot应用的配置文件应该放在哪里？如上图位置。</p></li><li><p>如果tomcat默认的8080端口被占用，我们只需要在上面的任意一个配置文件中添加 “server.port: 要修改的端口号” 就可以修改Spring Boot应用的启动端口，当然这里也支持 properties配置文件，不过我们建议统一都使用yaml文件作为配置文件，其中yaml的具体语法可以参考腾讯云的<strong>YAML 格式介绍</strong>文档： <a href="https://cloud.tencent.com/document/product/649/17925%EF%BC%9B">https://cloud.tencent.com/document/product/649/17925；</a></p></li><li><p>如果要修改启动端口，我们只需要在上述配置路径下任意一个 application.yml配置文件中添加配置代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure></li><li><p>添加配置代码后，重启应用，就可以通过8000端口访问应用了。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101124218.png" alt="image-20211110112404165"></p></li></ul><h4 id="第二章-Spring-Cloud的介绍"><a href="#第二章-Spring-Cloud的介绍" class="headerlink" title="第二章  Spring Cloud的介绍"></a>第二章  Spring Cloud的介绍</h4><p>在掌握了Spring Boot的基本使用后，接下来我们进入Spring Cloud的内容学习；</p><p>什么是Spring  Cloud？</p><p>Spring Boot和Spring Cloud又有什么关系呢？</p><p>带着这些问题我们继续Spring Cloud的内容学习。</p><h5 id="2-1-什么是Spring-Cloud"><a href="#2-1-什么是Spring-Cloud" class="headerlink" title="2.1  什么是Spring Cloud"></a>2.1  什么是Spring Cloud</h5><ul><li><p>什么是Spring Cloud？</p><ul><li>Spring Cloud是基于Spring Boot实现微服务的框架，包含多个子项目的整体方案。</li><li>与其他微服务框架的最明显区别是只能使用Java语言。</li></ul></li><li><p><strong>Spring Cloud的核心</strong>：</p><ul><li><p>服务的注册与发现</p><ul><li><p>服务提供者：是指服务的被调用方</p></li><li><p>服务消费者：是指服务的调用方</p></li></ul></li></ul></li><li><p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线）</p></li><li><p>Spring Cloud是基于Spring Boot 提供的一套微服务解决方案</p></li><li><p>Spring Cloud除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p></li><li><p>Spring CLoud利用Spring Boot的开发便利性巧妙的简化了分布式系统基础设施的开发，Spring  Cloud为开发人员提供了快速构建分布式系统的一些工具。</p></li><li><p><strong>Spring Cloud的核心是服务注册与发现</strong>，后面我们在使用整套Spring Cloud的功能时，都需要先把开发好的服务注册到服务注册中心。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101133316.png" alt="image-20211110113346246"></p></li><li><p>上图中就是Spring Cloud的基本组件架构图，从上图我们也可以看出来，Spring Cloud包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等。它们都可以用SpringBoot的开发风格做到一键启动和部署。</p></li></ul><h5 id="2-2-Spring-Boot和Spring-Cloud的区别"><a href="#2-2-Spring-Boot和Spring-Cloud的区别" class="headerlink" title="2.2  Spring Boot和Spring Cloud的区别"></a>2.2  Spring Boot和Spring Cloud的区别</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101134519.png" alt="image-20211110113448465"></p><p>上图是Spring官网的关于Spring Boot的介绍图，在了解了Spirng Cloud的基本概念后我们再看这幅图，相信通过这幅图大家应该能明白Spirng Boot和Spring Cloud的基本区别了。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101137419.png" alt="image-20211110113702359"></p><ul><li><p>Spring boot 是 Spring 的一套快速配置脚手架，可以基于spring boot 快速开发单个微服务； Spring Cloud是一个基于Spring Boot实现的云应用开发工具；</p></li><li><p>Spring boot专注于快速、方便集成的单个个体，Spring Cloud是关注全局的服务治理框架；</p></li><li><p>Spring boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置， Spring Cloud很大的一部分是基于Spring boot来实现。</p></li><li><p>Spring boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring boot， 属于依赖的关系。</p></li></ul><h5 id="2-3-Spring-Cloud的常用组件"><a href="#2-3-Spring-Cloud的常用组件" class="headerlink" title="2.3  Spring Cloud的常用组件"></a>2.3  Spring Cloud的常用组件</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101141230.png" alt="image-20211110114127171"></p><ul><li><p>在介绍Spring Cloud 常用组价之前，首先要介绍一下Netflix ，Netflix 是一个很伟大的公司，在 Spring Cloud项目中占着重要的作用，Netflix公司提供了包括Eureka、Hystrix、Zuul、 Archaius等在内的很多组件，在微服务架构中至关重要，Spring在Netflix的基础上，封装了一系列的组件，命名为：Spring Cloud Eureka、Spring Cloud Hystrix、Spring Cloud Zuul等， 下边对各个组件进行分别介绍：</p><ul><li><strong>Spring Cloud Eureka</strong><ul><li>服务注册中心,可以把开发的接口注册到Eureka服务注册中心，所有服务间调用都通过服务的形式访问，并不通过http直连。构成Eureka体系的包括：<strong>服务注册中心、服务提供者、 服务消费者</strong>。</li></ul></li><li><strong>Spring Cloud Ribbon</strong><ul><li>Spring Cloud Eureka描述了服务如何进行注册，注册到哪里，服务消费者如何获取服务生产者的服务信息，但是Eureka只是维护了服务生产者、注册中心、服务消费者三者之间的关系，<strong>真正的服务消费者调用服务生产者提供的数据是通过Spring Cloud Ribbon 来实现的。</strong></li></ul></li><li><strong>Spring Cloud Feign</strong><ul><li>如果使用过Ribbon调用服务的话，就可以感受到使用Ribbon的方式还是有一些复杂，因 此Spring Cloud Feign应运而生。<strong>Spring Cloud Feign 是一个声明web服务客户端</strong>，这使得编写Web服务客户端更容易，使用Feign只需要创建一个接口并对它进行注解。 Spring  Cloud 集成 Ribbon 和 Eureka 提供的负载均衡的HTTP客户端 Feign。<strong>简单的可以理解为： Spring Cloud Feign 的出现使得Eureka和Ribbon的使用更为简单。</strong></li></ul></li><li> <strong>Spring Cloud Hystrix</strong></li><li>断路器，保险丝；例如：当有一个服务出现了故障，而服务的调用方不知道服务出现故障， 若此时调用放的请求不断的增加，最后就会等待出现故障的依赖方相应形成任务的积压， 最终导致自身服务的瘫痪。Spring Cloud Hystrix正是为了解决这种情况的，<strong>防止对某一故障服务持续进行访问</strong>。</li><li><strong>Spring Cloud Config</strong><ul><li>对于微服务还不是很多的时候，各种服务的配置管理起来还相对简单，但是当成百上千的微服务节点起来的时候，服务配置的管理变得会复杂起来。分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。</li><li>配置服务的内存中（即本地），也支持放在远程Git仓库中。在Cpring Cloud Config 组件中，分两个角色，一是Config Server，二是Config Client。<strong>Config Server用于配置属性的存储</strong>，存储的位置可以为Git仓库、SVN仓库、本地文件等，<strong>Config Client用于服务属性的读取</strong>。</li></ul></li><li><strong>Spring Cloud Zuul</strong><ul><li>zuul 是netflix开源的一个API Gateway 服务器, <strong>本质上是一个web servlet应用</strong>。Zuul 在云平台上提供动态<strong>路由，监控，弹性，安全等</strong>边缘服务的框架。<strong>Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门</strong>。</li></ul></li><li><strong>Spring Cloud Bus</strong><ul><li>我们如果要去更新所有微服务的配置，在不重启的情况下去更新配置，只能依靠spring  cloud config了，但是，是我们要一个服务一个服务的发送post请求，这其实还是非常麻烦的。<strong>但是通过Bus消息总线，只需要在SpringCloud Config Server端发出refresh，就可以触发所有微服务更新了。</strong></li></ul></li></ul></li></ul><h6 id="2-3-1-Spring-Cloud-Eureka"><a href="#2-3-1-Spring-Cloud-Eureka" class="headerlink" title="2.3.1  Spring Cloud Eureka"></a>2.3.1  Spring Cloud Eureka</h6><ul><li><p>什么是Spring Cloud Eureka？</p><ul><li>一个基于rest服务的服务治理组件。</li><li>实现了云端负载均衡和中间层服务器的故障转移。</li><li>由两个组件组成<ul><li>Eureka服务器</li><li>Eureka客户端</li></ul></li></ul><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101151996.png" alt="image-20211110115103901"></p></li><li><p>Spring Cloud Eureka：</p><ul><li>一个基于rest服务的服务治理组件。由两个组件组成：Eureka服务器和Eureka客户端。Eureka服 务器用作服务注册服务器。Eureka客户端是一个java客户端，用来简化与服务器的交互、作为轮 询负载均衡器，并提供服务的故障切换支持。Netflix在其生产环境中使用的是另外的客户端，它 提供基于流量、资源利用率以及出错状态的加权负载均衡。</li></ul></li><li><p>上图中描述了：</p><ol><li><p>三台Eureka服务注册中心构成的服务注册中心的主从复制集群；</p></li><li><p>然后服务提供者向注册中心进行注册、续约、下线服务等；</p></li><li><p>服务消费者向Eureka注册中心拉去服务列表并维护在本地（这也是客户端发现模式的机制体现！）；</p></li><li><p>然后服务消费者根据从Eureka服务注册中心获取的服务列表选取一个服务提供者进行消费服务。</p></li></ol></li></ul><h6 id="2-3-2-Spring-Cloud-Ribbon"><a href="#2-3-2-Spring-Cloud-Ribbon" class="headerlink" title="2.3.2  Spring Cloud Ribbon"></a>2.3.2  Spring Cloud Ribbon</h6><ul><li><p>什么是Spring Cloud Ribbon？</p><ul><li>Spring Cloud Ribbon 是一个<strong>基于Http和TCP的客服端负载均衡工具</strong>，它是基于 Netflix Ribbon实现的。</li><li>不需要独立部署，几乎存在于每个微服务的基础设施中</li><li><strong>主要提供客户端的软件负载均衡算法，因为负载均衡是对系统的高可用、网络压力的缓解和处理能力扩容的重要手段之一</strong>。</li></ul></li><li><p>在2.3.1中提到了服务消费者是将服务从注册中心获取服务生产者的服务列表并维护在本地的，这种客户端发现模式的方式是服务消费者选择合适的节点进行访问服务生产者提供的数据，这种选择合适节点的过程就是Spring Cloud Ribbon完成的。</p></li><li><p>完善的配置选项，比如连接超时、重试、重试算法等。Ribbon内置可插拔、可定制的负载均衡组 件。下面是用到的一些负载均衡策略：</p><ul><li>简单轮询负载均衡</li><li>加权响应时间负载均衡</li><li>区域感知轮询负载均衡</li><li>随机负载均衡</li></ul></li></ul><h6 id="2-3-3-Spring-Cloud-Feign"><a href="#2-3-3-Spring-Cloud-Feign" class="headerlink" title="2.3.3  Spring Cloud Feign"></a>2.3.3  Spring Cloud Feign</h6><ul><li>什么是Spring Cloud Feign？<ul><li><strong>Spring Cloud Feign 是一个声明web服务客户端，这使得编写Web服务客户端更容易 。</strong></li><li>完全代理HTTP请求，只需要像调用方法一样调用它就可以完成服务请求。</li><li>Spring Cloud Feign 的出现使得Eureka和Ribbon的使用更为简单</li></ul></li><li>Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。Feign 提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。</li><li>而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关 处理。<strong>Feign整合了Ribbon和Hystrix</strong>(关于Hystrix我们后面再讲)，<strong>可以让我们不再需要显式地使用这两个组件</strong>。</li></ul><h6 id="2-3-4-Spring-Cloud-Hystrix"><a href="#2-3-4-Spring-Cloud-Hystrix" class="headerlink" title="2.3.4  Spring Cloud Hystrix"></a>2.3.4  Spring Cloud Hystrix</h6><ul><li>什么是Spring Cloud Hystrix？<ul><li><strong>容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</strong><ul><li>也被称之为断路器，Hystrix提供了熔断、隔离、Fallback、cache、监控等功能，能够在一 个、或多个依赖同时出现问题时保证系统依然可用。</li></ul></li></ul></li><li>断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决。如果问题似乎已经得到纠正，应用程序可以尝试调用操作。</li><li>断路器增加了稳定性和灵活性，以一个系统，提供稳定性，而系统从故障中恢复，并尽量减少此 故障的对性能的影响。它可以帮助快速地拒绝对一个操作，即很可能失败，而不是等待操作超时 （或者不返回）的请求，以保持系统的响应时间。</li></ul><h6 id="2-3-5-Spring-Cloud-Config"><a href="#2-3-5-Spring-Cloud-Config" class="headerlink" title="2.3.5  Spring Cloud Config"></a>2.3.5  Spring Cloud Config</h6><ul><li><p>什么是Spring Cloud Config？</p><ul><li>Spring Cloud Config是分布式配置中心，可以让你把配置放到远程服务器，目前支持<strong>本地存储、Git以及Subversion</strong>。</li><li>在Spring Cloud Config 组件中，分两个角色：<ul><li>Config Server：用于配置属性的存储，存储的位置可以为Git仓库、SVN仓库、本地文件等</li><li>Config Client：用于服务属性的读取。</li></ul></li></ul></li><li><p>对于微服务还不是很多的时候，各种服务的配置管理起来还相对简单，但是当成百上千的微服务节点起来的时候，服务配置的管理变得会复杂起来。</p></li><li><p>在分布式系统中，每一个功能模块都能拆分成一个独立的服务，一次请求的完成，可能会调用很多个服务协调来完成，为了方便服务配置文件统一管理，更易于部署、维护，所以就需要分布式配置中心组件了，在spring cloud中，有分布式配置中心组件spring cloud config，它支持配置文件放在在配置服务的内存中，也支持放在远程Git仓库里。引入spring cloud config后，我们的外部配置文件就可以集中放置在一个git仓库里，再新建一个config server，用来管理所有的配置文件，维护的时候需要更改配置时，只需要在本地更改后，推送到远程仓库，所有的服务实例都可以通过config server来获取配置文件，这时每个服务实例就相当于配置服务的客户端config client,为了保证系统的稳定，配置服务端config server可以进行集群部署，即使某一个实例，因为某种原因不能提供服务，也还有其他的实例保证服务的继续提供服务。</p></li><li><p>Spring Cloud Config 组件的二个角色：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101205892.png" alt="image-20211110120519832"></p></li><li><p>在Spring Cloud Config 组件中，分两个角色，一是Config Server，二是Config Client。如上图所示。</p></li></ul><h6 id="2-3-6-Spring-Cloud-Zuul"><a href="#2-3-6-Spring-Cloud-Zuul" class="headerlink" title="2.3.6  Spring Cloud Zuul"></a>2.3.6  Spring Cloud Zuul</h6><ul><li>什么是Spring Cloud Zuul ？<ul><li><strong>Spring Cloud Zuul是服务网关，边缘服务工具</strong>；</li><li>提供服务路由、均衡负载功能之外，它还具备了权限控制等功能；</li><li>为微服务架构提供了前门保护的作用；</li><li><strong>将权限控制这些较重的非业务逻辑内容迁移到服务路由层面</strong>，使得服务集群主体能够具备更高的可复用性和可测试性；</li></ul></li><li>Zuul 是 Netflix 开源的微服务网关，Spring Cloud 对 Zuul 进行了整合和增强。在 SpringCloud 体系中，<strong>Zuul 担任着网关的角色，对发送到服务端的请求进行一些预处理，比如 安全验证、动态路由、负载分配等</strong>。</li><li><strong>Zuul 的核心是 Filters</strong>，根据执行时期分为以下几类：<ul><li>PRE：这种过滤器在请求被路由之前调用</li><li>ROUTING：这种过滤器将请求路由到微服务</li><li>POST：这种过滤器在路由到微服务以后执行</li><li>ERROR：在其他阶段发生错误时执行该过滤器</li></ul></li></ul><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101209103.png" alt="image-20211110120917045"></p><ul><li>如上图所示，Zuul 相当于是设备和 Web 网站后端所有请求的前门。</li></ul><h6 id="2-3-7-Spring-Cloud-Bus"><a href="#2-3-7-Spring-Cloud-Bus" class="headerlink" title="2.3.7  Spring Cloud Bus"></a>2.3.7  Spring Cloud Bus</h6><ul><li><p>什么是Spring Cloud Bus ？</p><ul><li><strong>Spring Cloud Bus 是事件、消息总线</strong>，<strong>用于在集群（例如，配置变化事件）中传播状态变化</strong>，可与Spring Cloud Config联合实现热部署。</li></ul></li><li><p>我们如果要去更新所有微服务的配置，在不重启的情况下去更新配置，只能依靠spring cloud  config了，但是，是我们要一个服务一个服务的发送post请求，这其实还是非常麻烦的。但是通 过Bus消息总线，只需要在SpringCloud Config Server端发出refresh，就可以触发所有微服务更新了。</p></li><li><p>Spring Cloud Bus官方意义：消息总线。</p></li><li><p>当然动态更新服务配置只是消息总线的一个用处，还有很多其他用处。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101211886.png" alt="image-20211110121104828"></p></li><li><p> 如上图就演示了联合Spring Cloud Config 动态更新服务配置。</p></li></ul><ol><li>提交代码触发post给客户端C发送bus/refresh</li><li>客户端C接收到请求从Server端更新配置并且发送给Spring Cloud Bus</li><li>Spring Cloud bus接到消息并通知给其它客户端</li><li>其它客户端接收到通知，请求Server端获取最新配置</li><li>全部客户端均获取到最新的配置</li></ol><h4 id="第三章-开发一个Spring-Cloud程序"><a href="#第三章-开发一个Spring-Cloud程序" class="headerlink" title="第三章  开发一个Spring Cloud程序"></a>第三章  开发一个Spring Cloud程序</h4><ul><li><p>在掌握了Spring Boot的基本使用，以及Spring Cloud的基本概念、组件后我们进行Spirng Cloud的代码编写，接下来我将一步步带领大家完成第一个Spring Cloud应用程序。</p></li><li><p>这里可以再回顾一下Spring Boot项目的创建，接下来的项目创建都会基于Spring Boot创建。</p></li></ul><h5 id="3-1-开发第一个Spring-Cloud程序"><a href="#3-1-开发第一个Spring-Cloud程序" class="headerlink" title="3.1  开发第一个Spring Cloud程序"></a>3.1  开发第一个Spring Cloud程序</h5><ul><li><p>开发第一个Spring Cloud应用程序(涉及服务注册中心）</p></li><li><p>包含以下步骤：</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101214110.png" alt="image-20211110121432065"></p></li><li><p>前面我们学习了Spring Cloud的常用组件，此处第一个Spirng Cloud应用程序，只涉及服务提供者，服务消费者，服务注册中心；服务消费者中会涉及到Ribbon的使用。</p></li><li><p> 环境准备：</p></li><li><p>JDK1.8</p></li><li><p>Maven版本：3.3.9</p><ul><li>修改setting配置为国内下载镜像</li><li>Maven编码过程中需要下载依赖，需要网络环境</li></ul></li><li><p>Eclipse或者IDEA</p><ul><li>字符集编码：UTF-8</li></ul></li><li><p>环境准备跟Spirng Boot项目一致。</p></li></ul><h6 id="3-1-1-开发eureka-server"><a href="#3-1-1-开发eureka-server" class="headerlink" title="3.1.1  开发eureka-server"></a>3.1.1  开发eureka-server</h6><ul><li><p><strong>创建eureka-server项目：</strong></p><ul><li><p>根据”开发第一个Spring Boot项目”创建eureka-server项目:</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101725262.png" alt="image-20211110172527172"></p></li><li><p>eureka-server项目的基本创建方式跟前面讲述的Spring Boot项目创建方式一致，这里就不重复了。</p></li></ul></li><li><p><strong>添加dependencyManagement定义：</strong></p><ul><li><p>在项目根目录下的pom.xml配置文件中添加dependencyManagement定义（放在 dependencies同级节点）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- springboot 1.5.11对应的springcloud依赖管理 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>这里添加dependencyManagement主要是为了统一定义Spring Cloud的版本信息，注意这里并没有实际引入依赖，只是在后面定义依赖的时候不需要申明版本信息了。</p></li><li><p><strong>添加eureka依赖：</strong></p><ul><li><p>在项目根目录下的pom.xml添加eureka的依赖配置信息，这里注意添加2个依赖：spring-cloud-starter-config和spring cloud-starter-eureka-server，注意位置要放在dependencies节点下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>在启动类，添加注解：</strong></p><ul><li><p>在启动类EurekaServerApplication上添加@EnableEurekaServer注解;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>启动类的创建方式跟Spring Boot应用程序是一样，实际上这里就是一个Spirng Boot应用程序；</p></li><li><p>注意一定要添加<font color='red'>@EnableEurekaServer注解，表明当前应用是一个eureka服务注册中心，后面 其它应用程序需要注册到此中心。</font></p></li></ul><ul><li><p><strong>添加eureka配置文件：</strong></p><ul><li><p>在resources目录下新建配置文件application.yml，并添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#表示是否将自己注册到Eureka Server，默认为true。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#表示是否从Eureka Server获取注册信息，默认为true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure></li><li><p>server.port: 8000这里是把应用的启动端口改为了8000</p></li><li><p>eureka.client.register-with-eureka： fase：表示是否将自己注册到Eureka Server，默认为 true。</p></li><li><p>eureka.client.fetch-registry: false：表示是否从Eureka Server获取注册信息，默认为true</p></li><li><p>eureka.client.service-url.defaultZone: <a href="http://localhost:${server.port}/eureka/">http://localhost:${server.port}/eureka/</a> 这里是定义了 服务注册中心的地址，其中${server.port}就是前面定义的server.port: 8000配置，时间上这段配 置就是eureka.client.service-url.defaultZone: <a href="http://localhost:8000/eureka/%EF%BC%9B%E8%BF%99%E6%AE%B5%E9%85%8D%E7%BD%AE%E5%9C%A8%E5%85%B6">http://localhost:8000/eureka/；这段配置在其</a> 它应用程序的配置中都需要加上，指明了服务注册中心的地址。</p></li></ul></li></ul><ul><li><p><strong>浏览器访问测试：</strong></p><ul><li><p>运行EurekaServerApplication启动类，访问<a href="http://localhost:8000：">http://localhost:8000：</a></p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101806261.png" alt="image-20211110180611062"></p></li><li><p>访问<a href="http://localhost:8000可以看到如上图结果；如果有服务注册到注册中心，可以在">http://localhost:8000可以看到如上图结果；如果有服务注册到注册中心，可以在</a> application下面看到对应的服务名称。</p></li></ul></li><li><p>eureka-server项目的完整pom文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.keepdive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.11.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- springboot 1.5.11对应的springcloud依赖管理 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="3-1-2-开发eureka-provider"><a href="#3-1-2-开发eureka-provider" class="headerlink" title="3.1.2  开发eureka-provider"></a>3.1.2  开发eureka-provider</h6><ul><li><p><strong>创建eureka-provider项目</strong></p><ul><li>根据Spring Boot项目创建方式创建eureka-provider项目</li></ul><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101821055.png" alt="image-20211110182142953"></p><ul><li>项目创建方式如eureka-server，这里是创建服务提供者，需要把当前服务提供者注册到上一小节中我们创建的eureka-server中。</li></ul></li><li><p><strong>添加dependencyManagement定义和eureka依赖：</strong></p><ul><li><p>跟开发eureka-server中的内容一致；</p></li><li><p>eureka-provider项目完整依赖；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.keepdive<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.11.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- springboot 1.5.11对应的springcloud依赖管理 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Dalston.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>在启动类，添加注解</strong></p><ul><li><p>在启动类EurekaProviderApplication上添加@EnableEurekaClient， @EnableDiscoveryClient注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaProviderApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>启动类的创建跟eureka-server一致。</p></li><li><p><font color='red'>@EnableEurekaClient表明当前应用是一个eureka客户端程序</font></p></li><li><p><font color='red'>@EnableDiscoveryClient表明当前应用可以被eureka服务注册中心发现</font></p></li></ul><ul><li><p><strong>开发eureka-provider</strong></p><ul><li><p>在启动类EurekaProviderApplication相同包目录下新建 HelloController类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello/&#123;name&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;provider: hello &quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><font color='red'>@RestController表明当前Controller类的所有接口都是rest方式，直接返回数据，不返回视图（页面），方法上不需要再添加ResponseBody注解。</font></p></li></ul></li><li><p><strong>添加配置文件：</strong></p><ul><li><p>在resources目录下新建配置文件application.yml，并添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-provider</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8000/eureka/</span><br></code></pre></td></tr></table></figure></li><li><p>server.port: 8001表明应用的启动端口为8001</p></li><li><p>spring.application.name: eureka-provider 配置当前服务的名称为eureka-provider，启动成功后会在eureka的web服务页面显示出来</p></li><li><p>eureka.client.service-url.defaultZone: <a href="http://localhost:8000/eureka/%E8%A1%A8%E6%98%8E%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E4%B8%8A%E5%B0%8F%E8%8A%82%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%9A%84eureka-server%E7%9A%84%E5%9C%B0%E5%9D%80">http://localhost:8000/eureka/表明服务注册中心的地址，实际上就是我们上小节中创建的eureka-server的地址</a></p></li></ul></li></ul><ul><li><p><strong>启动eureka-provider项目</strong></p><ul><li><p>运行启动类EurekaProviderApplication，用浏览器访问<a href="http://localhost:8000/%EF%BC%9A">http://localhost:8000/：</a></p></li><li><p>eureka-provider会自动注册到enreka-server的服务注册中心</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111101838838.png" alt="image-20211110183820695"></p></li></ul></li><li><p>启动eureka-server，eureka-provider应用后访问<a href="http://localhost:8000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B7%B2%E7%BB%8F%E6%B3%A8%E5%86%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%EF%BC%8C%E6%B3%A8%E6%84%8F%E6%AD%A4%E5%A4%84%E8%AE%BF%E9%97%AE%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%89%80%E4%BB%A5%E7%AB%AF%E5%8F%A3%E6%98%AF8000%EF%BC%8C%E4%B8%8D%E6%98%AF8001%E3%80%82">http://localhost:8000/就可以看到已经注册的服务，注意此处访问的地址为服务注册中心的地址，所以端口是8000，不是8001。</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一、微服务介绍</title>
    <link href="/2021/11/08/%E4%B8%80%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/11/08/%E4%B8%80%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="微服务介绍"><a href="#微服务介绍" class="headerlink" title="微服务介绍"></a>微服务介绍</h3><p>什么是微服务？把一个庞大的application<strong>拆</strong>成几个小的独立的服务，再把独立的服务<strong>串</strong>起来的一种架构设计。</p><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><p>通过本文的学习，您将可以:</p><ul><li>了解软件架构的演变过程 </li><li>了解传统软件架构的弊端</li><li>了解微服务的概念及常见架构</li></ul><h4 id="第一章-软件架构的演变过程"><a href="#第一章-软件架构的演变过程" class="headerlink" title="第一章 软件架构的演变过程"></a>第一章 软件架构的演变过程</h4><h5 id="1-1-传统的单体架构"><a href="#1-1-传统的单体架构" class="headerlink" title="1.1 传统的单体架构"></a>1.1 传统的单体架构</h5><ul><li>不同于微服务，传统的项目会包含很多功能，是一个大而全的“超级”工程。<ul><li>例如：以普通架构方式实现的电商平台包含：登录、权限、会员、商品库存、订单、 收藏、关注、购物车等功能的多个单一项目。随着项目业务越来越复杂、开发人员越 来越多，相应开发、编译、部署、技术扩展、水平扩展都会受到限制。<img src="https://gitee.com/divemaven/git-project/raw/master/202111081534330.png" alt="image-20211108153431273"></li></ul></li><li>单体架构是最简单的软件架构，常用于传统的应用软件开发以及传统Web应用。</li><li>传统Web应用，一般是将所有功能模块都打包(jar,war)在一个Web容器（JBoss、Tomcate）中 部署、运行。随着业务复杂度增加、技术团队规模扩大，在一个单体应用中维护代码，会降低开 发效率。即使是处理一个小需求，也需要将所有机器上的应用全部部署一遍，增加了运维的复杂 度。</li></ul><h5 id="1-2-基于SOA的软件架构"><a href="#1-2-基于SOA的软件架构" class="headerlink" title="1.2 基于SOA的软件架构"></a>1.2 基于SOA的软件架构</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081538726.png" alt="image-20211108153829683"></p><ul><li><p>SOA也叫面向服务的架构，从单体架构到SOA的演进，需要结合水平拆分以及垂直拆分。</p></li><li><p>SOA强调用统一的协议进行服务间的通信，服务间运行在彼此独立的硬件平台但是需通过统一的 协议接口相互协作，也即将应用系统服务化。</p><ul><li>举个易懂的例子，单体服务如果相当于一个快餐店，所有的服务员都是一样的，又要负责收银结算，又要负责做汉堡，又要负责端盘子，又要负责打扫，服务员之间不需要有交流，一个用户来了一个服务员从前到后负责到底。SOA相当于让服务员有职责分工，收银员负责收银， 厨师负责做汉堡，保洁阿姨负责打扫等等。所有服务员需要同一种语言交流，方便工作协调。</li></ul></li><li><p> SOA架构的特征</p></li><li><p>基于SOA服务思想进行功能的抽取(重复代码问题解决),以服务为中心来管理项目。</p></li><li><p>各个系统之间要进行调用,所以出现ESB来管理项目(可以使用各种技术实现： webservice，rpc等)。</p></li><li><p>ESB是作为系统与系统之间桥梁,很难进行统一管理。</p></li></ul><h5 id="1-3-基于微服务的系统架构"><a href="#1-3-基于微服务的系统架构" class="headerlink" title="1.3 基于微服务的系统架构"></a>1.3 基于微服务的系统架构</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081541492.png" alt="image-20211108154143453"></p><ul><li><p><strong>微服务的核心思路是拆分</strong>。单体项目的问题，通过把项目拆分成一个个小项目就可以解决。</p></li><li><p><strong>与SOA区别</strong>： </p><ul><li>微服务不再强调传统SOA架构里面比较重的ESB企业服务总线，<strong>真正地实现服务自治</strong>； </li><li>SOA的思想进入到单个业务系统内部，<strong>实现真正的组件化</strong>。</li></ul></li><li><p>基于SOA面向服务架构演变出了微服务架构，微服务也是一种服务化，不过其和SOA架构的服务 化概念也是有区别的。可以从几个关键字来理解：</p><ul><li><p><strong>松耦合</strong>：每个微服务内部都可以使用DDD(领域驱动设计)的思想进行设计领域模型，服务间尽量减少同步的调用，多使用消息的方式让服务间的领域事件来进行解耦。</p></li><li><p><strong>轻量级协议</strong>：Dubbo是SOA的开源的标准实现之一，类似的还有像gRPC、Thrift等。微服务 更倾向于使用Restful风格的API，轻量级的协议可以很好得支持跨语言开发的服务，可能有的微服务用Java实现，有的用Go语言，有的用C++，但所有的语言都可以支持Http协议通信， 所有的开发人员都能理解Restful风格API的含义。</p></li><li><p><strong>高度自治和持续集成</strong>：从底层的角度来说，SOA更加倾向于基于虚拟机或者服务器的部署， 每个应用都部署在不同的机器上。微服务可以很好的和容器技术结合，目前Docker已经成为很多微服务实践的基础容器。如果某个微服务流量压力比其他微服务大，可以在不增加机器的情况。在一台机器上多分配一些该微服务的容器实例。</p></li><li><p>其实从架构的演进的角度来看，整体的演进都是朝着越来越轻量级，越来越灵活的应用方向。 甚至到近两年日渐成熟起来的<strong>Serverless（无服务）架构</strong>。从单体服务到分层的服务，再到面向服务、再到微服务甚至无服务。对于架构的挑战是越来越大的。</p></li></ul></li></ul><h4 id="第二章-微服务的概念和常见架构"><a href="#第二章-微服务的概念和常见架构" class="headerlink" title="第二章 微服务的概念和常见架构"></a>第二章 微服务的概念和常见架构</h4><p>接下来我们正式进入微服务的学习，我们先看看一下微服务到底是什么，以及微服务的常用架构有哪些？</p><h5 id="2-1-微服务的概念"><a href="#2-1-微服务的概念" class="headerlink" title="2.1 微服务的概念"></a>2.1 微服务的概念</h5><ul><li><p>什么是微服务？</p><ul><li><p>把一个庞大的application<strong>拆</strong>成几个小的独立的服务，再把独立的服务<strong>串</strong>起来的一种架构设计。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081613999.png" alt="image-20211108161316936"></p></li></ul></li><li><p>微服务架构描述了一种将软件应用程序设计为<strong>一组可独立部署的服务</strong>的特定方式。</p></li><li><p>虽然这种架构风格没有明确的定义，但在组织、业务能力上有一些共同的特征：<strong>自动化部署</strong>，<strong>端点智能化</strong>，<strong>语言和数据的去中心化控制</strong>。</p></li><li><p>微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的 进程中，服务间通信采用轻量级通信机制(<strong>通常用HTTP资源API</strong>)。这些服务围绕业务能力构建并且可通过<strong>全自动部署机制独立部署</strong>。</p></li><li><p>比如12306买火车票，或者是网上购物：以前单体架构的感受是：高峰期人多的时候，页面刷不开，等刷开的时候，火车票都抢光了。网上购物也一样，浏览、选择、下订单了，结果因为支付失败，又需要全部重新来一遍。给人体验非常不好。为了提高体验，对单体架构进行扩容提升性能，只能购买昂贵的服务器，去支撑峰值流量，而绝大部分人都是在访问页面，后面的选择、（加入购物车）、下单、支付、每个环节的转换率都会使访问量降低，而单体架构的扩容是对所有功能进行整体扩容，造成大量浪费，如果采用微服务架构以后，可以针对浏览界面的服务做更多扩容，订单服务少量扩容，不再需要对所有功能进行整体扩容，<strong>所以把功能拆分微服务后，既能提升用户体验，又能实现节约硬件成本的作用</strong>。尤其适合现在互联网上的抢票、秒杀等会带来突发峰值流量的场景。因为结合具有资源弹性伸缩的已经成熟的云计算技术，微服务架构可以很好的满足这些场景需求。</p></li></ul><h5 id="2-2-微服务的特征"><a href="#2-2-微服务的特征" class="headerlink" title="2.2 微服务的特征"></a>2.2 微服务的特征</h5><ul><li>微服务的九大特征：<ol><li>服务组件化</li><li> 按业务组织团队</li><li>做产品的态度</li><li>智能端点和哑管道</li><li>去中心化治理</li><li>去中心化管理数据</li><li>基础设施自动化</li><li>容错设计</li><li>演进式设计</li></ol></li><li>在这里我们先简单了解微服务的九大特征，具体的将会在后续的章节的微服务拆分内容中进行讲解，大家在后续实践中也可以深入了解和应用。</li><li><strong>微服务的特征</strong><ol><li><strong>服务组件化：</strong> 在微服务架构中，需要我们对服务进行组件化分解，服务是一种进程外的组件，它通过HTTP等通信协议进行协作，而不是像传统组件那样镶入式的方式协同工作，每一 个服务都独立开发、部署、可以有效避免一个服务的修改引起整个系统的重新部署。</li><li><strong>按业务组织团队：</strong> 在实施微服务架构时，需要采用不同的团队分割方法。由于每一个服务 都是针对特定的业务的宽栈或者全栈实现的，主要负责数据的持久化存储，又要负责用户接口定义等各种跨专业领域的职能。因此面对大型项目的时候，对于微服务团队的拆分更加建议按业务线的方法进行拆分，一方面可以有效的减少服务内部修改所产生的内耗，另一方面，团队边界可以变得更为清晰。</li><li><strong>做产品的态度：</strong> 在微服务架构团队中，每个小团队都应该以做产品的方式，对其整个生命 周期负责，而不是像传统项目开发那样，交付给测试，运维为目标。</li><li><strong>智能端点和哑管道：</strong> 由于各个服务不在一个进程中，组件间的通信模式发生了改变，原本进程 内的方法调用变成了RPC方式的调用，会导致微服务之间产生烦琐的通信，使得系统表现更为糟 糕，所以我们需要更粗粒度的通信协议： 在微服务架构中，通常会使用以下两种服务调用方 法：<ul><li>使用<strong>HTTP的RESTful API</strong>或者轻量级的消息发送协议，实现消息传递与服务调用的触发。</li><li>通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的中间体。</li><li>在极度强调性能的情况下，还有可能会使用二进制的消息发送协议，例如protobuf</li></ul></li><li> <strong>去中心化治理：</strong> 在整个微服务架构，通过采用轻量级的契约定义接口，使得我们对服务本身的 具体技术平台不再那么敏感，这样整个微服务架构系统中的各个组件就能针对不同的业务特点选 择不同的技术平台。</li><li><strong>去中心化管理数据：</strong> 在实施微服务架构时，希望每一个服务自己来管理其数据库，这就是数据 管理的去中心化，虽然数据管理的去中心化让数据管理更加细致化，让数据存储和性能达到最优， 但是不同的数据库实例，<strong>数据一致性也成了微服务架构中亟待解决的问题之一</strong>，分布式事务本身实现的难度就非常大，所以在微服务架构中，我们更强调各服务之间进行”<strong>无事务</strong>“的调用，而对数据一致性，只要求<strong>数据在最后的处理状态是一致</strong>的即可。</li><li><strong>基础设施自动化</strong>： 在微服务架构中，务必从一开始就构建起”持续交付“平台来支撑整个实施过程；</li><li><strong>容错设计</strong>： 在微服务架构中，快速检测出故障源并尽可能地自动恢复服务是必须被设计考虑的， 通常我们都希望在每个服务中<strong>实现监控和日志记录</strong>的组件。比如：服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等。</li><li><strong>演进式设计：</strong> 通过上面的几点特征，我们已经能够体会到，要实施一个完美的“微服务”架构， 需要考虑的设计与成本并不小，对于没有足够经验的团队来说，甚至要比单体应用要付出更多的代价。所以，很多情况下，架构师们都会以演进的方式进行系统的构建，在初期系统以单体系统的方式来设计和实施，一方面系统体量初期并不会很大，构建和维护成本都不高。另一方面，初期的核心业务在后期通常也不会发生巨大的改变。随着系统的发展或者业务的需要，架构师们会将一些<strong>经常变动</strong>或是有<strong>一定时间效应</strong>的内容进行“微服务”处理，并逐渐地将原来在单体系统中 多变的模块逐步拆分出来，<strong>而稳定不太变化的就形成了一个核心“微服务”存在于整个架构之中。</strong></li></ol></li><li> 如何理解智能端点和哑管道？</li><li>这玩意你要先理解智能端点和哑管道的反面是什么？就是SOA概念中专注服务治理的企业服务总线（简称ESB），<strong>ESB实质上就是一个管道</strong>，也就是应用A要访问服务B，A要先发数据给ESB， 然后ESB调用B，B产生的数据返给ESB，然后ESB再返给A，<strong>这样ESB不仅仅提供了路由的功能， 而且把自己做成了一个大型企业系统的中心</strong>，基于此，又发展附加了原本不属于管道的功能，比如服务B提供的是socket服务，但是应用A是使用http调用，这时ESB发展出了转换报文的功能， 甚至是服务B提供的是a,b,c三个数据，而应用A需要的是a，b，c拼接起来命名为d的数据，这也放在ESB中实现。这样就使得ESB实际上又承载了业务逻辑，<strong>使得原本复杂的系统通过服务治理把瓶颈和复杂度统统压到ESB一个中心点上去了</strong>，这跟微服务去中心化的思想截然相反。</li><li>所以ESB这一危险度（<strong>ESB完蛋，全部系统都受影响，另外要上系统，通常先要给ESB组看 一下，ESB需要一个额外的有执行力的团队去支撑</strong>）催生了微服务体系的智能端点和哑管道， 相对ESB而言，<strong>微服务体系的管道只提供路由或者负载均衡之类的，不承载业务逻辑</strong>，或者是MQ之类的异步消息中间件，管道根本不关心具体传送的数据，所以与其叫哑管道，不如叫非智能管道（实际上我都不知道为什么会翻成哑管道，难以理解），智能端点就是相对 ESB中的服务提供者只需要提供一种类型的服务，<strong>智能端点需要根据服务调用者的需求提供多种类型的服务以适应业务发展。</strong>也就是上述那些ESB所做的比如<strong>报文转换</strong>，比如<strong>数据转换</strong>等等统统是在服务提供端实现。</li></ul><h5 id="2-3-为什么使用微服务"><a href="#2-3-为什么使用微服务" class="headerlink" title="2.3 为什么使用微服务"></a>2.3 为什么使用微服务</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081642867.png" alt="image-20211108164244776"></p><ul><li>采用微服务架构模式，则可以解决单一架构模式带来的系统复杂性。<ul><li>相对于单体架构一旦需要变更非常麻烦，使用微服务以后，日日可变更，甚至可以实现自动化， 日日变更不头疼</li><li>采用微服务以后可以根据实时流量弹性伸缩，在流量高峰可以动态扩容，基于不同仓库数据， 可以实现实时更新，热生效</li><li>使用微服务以后开发人员的代码可以最大程度复用，减少工作量，让业务开发越来越快</li><li>基于微服务的Spring Cloud，Service Mesh可以进行跨语言，跨系统对话；减少了异构语言通信问题</li></ul></li></ul><h5 id="2-4-微服务的常见架构"><a href="#2-4-微服务的常见架构" class="headerlink" title="2.4 微服务的常见架构"></a>2.4 微服务的常见架构</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081653739.png" alt="image-20211108165344682"></p><ul><li><p><strong>Spring Cloud是基于Spring Boot的一整套实现微服务的框架，因此它只能采用Java语言</strong>，这是它与其他几个微服务框架的最明显区别。Spring Cloud是一个包含了很多子项目的整体方案，其中由Netflix开发后来又并入Spring Cloud的Spring Cloud Netflix是Spring Cloud微服务架构的核心项目，<strong>即可以简单地认为Spring Cloud微服务架构就是Spring Cloud Netflix</strong>，后面我们用 Spring Cloud时如果不特意声明，就是指Spring Cloud Netflix。</p></li><li><p>ZeroC IceGrid作为一种微服务架构，它基于RPC框架发展而来，具有良好的性能与分布式能力， 并具备微服务架构的如下明显特征：</p><ul><li>首先，微服务架构需要一个集中的服务注册中心，以及某种服务发现机制。</li><li>其次，微服务架构中的每个微服务通常会被部署为一个独立的进程，当无状态服务时，一般会由多个独立进程提供服务。</li><li>最后，一个好的微服务架构平台应该简化和方便应用部署。</li></ul></li><li><p>除了标准的基于RPC通信（以及类RPC的通信如Http Rest、SOAP等）的微服务架构，还有基于消息队列通信的微服务架构，这种架构下的微服务采用发送消息（Publish Message）与监听消息（Subscribe Message）的方式来实现彼此之间的交互。下图是这种微服务架构下各个组件之间的交互示意图，我们看到消息中间件是关键，它负责连通各个微服务与UI组件，担任了整个系统互联互通的重任。</p><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081659796.png" alt="image-20211108165953724"></p></li></ul><h5 id="2-5-微服务面临的挑战"><a href="#2-5-微服务面临的挑战" class="headerlink" title="2.5 微服务面临的挑战"></a>2.5 微服务面临的挑战</h5><p><img src="https://gitee.com/divemaven/git-project/raw/master/202111081700565.png" alt="image-20211108170033510"></p><ul><li>使用微服务面临的挑战：<ul><li>微服务应用作为分布式系统带来了复杂性。当应用是整体应用程序时，模块之间调用都在应用之内，即使进行分布式部署，依然在应用内调用。可是微服务是多个独立的服务，当进行模块调用的时候，分布式将会麻烦。</li><li> 多个独立数据库，事务的实现更具挑战性。</li><li>测试微服务变得复杂，当一个服务依赖另外一个服务时，测试时候需要另外一个服务的支持。</li><li>部署基于微服务的应用也很复杂，整体应用程序部署只需要部署在一组相同的服务器上，在这些服务前面加入传统的负载均衡器即可。独立服务的不是讲变得复杂，需要更高的自动化形式。</li></ul></li></ul><h4 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h4><p>本文主要讲述如下内容： </p><ul><li>软件架构的演变过程 </li><li>什么是微服务 </li><li>常见架构的微服务架构</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TSF</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
